/* -------------------------------------------*\
  _margin.scss

  - File to demonstrates scss @mixin.
  - Generating classes on on set margin values,
  - each iteration of an array of margins will create specific set values that
  - can be used to get exact spacing between elements, such as sections.
\*------------------------------------------- */

// Strip any characters except numbers
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Generate classes for each Spacing like Bootstrap:
// https://getbootstrap.com/docs/4.0/utilities/spacing/
@mixin generate-padding-classes($padding) {
  $padding-no : strip-unit($padding);

  .fcb-y#{$padding-no} {
    padding-top: $padding;
    padding-bottom: $padding;

    @include media-breakpoint-down(lg) {
      padding-top: ($padding-no / $padding-lg) + px;
      padding-bottom: ($padding-no / $padding-lg) + px;
    }

    @include media-breakpoint-down(md) {
      padding-top: ($padding-no / $padding-md) + px;
      padding-bottom: ($padding-no / $padding-md) + px;
    }

    @include media-breakpoint-down(sm) {
      padding-top: ($padding-no / $padding-sm) + px;
      padding-bottom: ($padding-no / $padding-sm) + px;
    }

    @include media-breakpoint-down(xs) {
      padding-top: ($padding-no / $padding-xs) + px;
      padding-bottom: ($padding-no / $padding-xs) + px;
    }
  }

  .fcb-x#{$padding-no} {
    padding-left: $padding - 15;
    padding-right: $padding - 15;

    @include media-breakpoint-down(lg) {
      padding-left: (($padding-no - 15) / $padding-lg) + px;
      padding-right: (($padding-no - 15) / $padding-lg) + px;
    }

    @include media-breakpoint-down(md) {
      padding-left: (($padding-no - 15) / $padding-md) + px;
      padding-right: (($padding-no - 15) / $padding-md) + px;
    }

    @include media-breakpoint-down(sm) {
      padding-left: (($padding-no - 15) / $padding-sm) + px;
      padding-right: (($padding-no - 15) / $padding-sm) + px;
    }

    @include media-breakpoint-down(xs) {
      padding-left: (($padding-no - 15) / $padding-xs) + px;
      padding-right: (($padding-no - 15) / $padding-xs) + px;
    }
  }

  .fcb-t#{$padding-no} {
    padding-top: $padding;

    @include media-breakpoint-down(lg) {
      padding-top: ($padding-no / $padding-lg) + px;
    }

    @include media-breakpoint-down(md) {
      padding-top: ($padding-no / $padding-md) + px;
    }

    @include media-breakpoint-down(sm) {
      padding-top: ($padding-no / $padding-sm) + px;
    }

    @include media-breakpoint-down(xs) {
      padding-top: ($padding-no / $padding-xs) + px;
    }
  }

  .fcb-b#{$padding-no} {
    padding-bottom: $padding;

    @include media-breakpoint-down(lg) {
      padding-bottom: ($padding-no / $padding-lg) + px;
    }

    @include media-breakpoint-down(md) {
      padding-bottom: ($padding-no / $padding-md) + px;
    }

    @include media-breakpoint-down(sm) {
      padding-bottom: ($padding-no / $padding-sm) + px;
    }

    @include media-breakpoint-down(xs) {
      padding-bottom: ($padding-no / $padding-xs) + px;
    }
  }

  .fcb-a#{$padding-no} {
    padding: $padding;

    @include media-breakpoint-down(lg) {
      padding: ($padding-no / $padding-lg) + px (($padding-no - 15) / $padding-lg) + px;
    }

    @include media-breakpoint-down(md) {
      padding: ($padding-no / $padding-md) + px (($padding-no - 15) / $padding-md) + px;
    }

    @include media-breakpoint-down(sm) {
      padding: ($padding-no / $padding-sm) + px (($padding-no - 15) / $padding-sm) + px;
    }

    @include media-breakpoint-down(xs) {
      padding: ($padding-no / $padding-xs) + px (($padding-no - 15) / $padding-xs) + px;
    }
  }
}

// Foreach margin in the $paddings array - generate spacing classes
// Example - $paddings: ( 70px, 30px, 40px, 50px );

@each $padding in $paddings {
  @include generate-padding-classes($padding);
}
